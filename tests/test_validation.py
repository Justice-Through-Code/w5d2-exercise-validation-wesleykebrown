'''
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
DO NOT EDIT THIS FILE
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
'''

import io
from unittest import mock, TestCase

from validation import validate_user_input, print_tenth_item


class TestLibraryFunctions(TestCase):

    @mock.patch('builtins.input', side_effect=['brownie', 'brownie', 'brownie', 'brownie', '4'])
    @mock.patch('sys.stdout', new_callable=io.StringIO)
    def test_validate_user_input_immediate_success(self, mock_stdout, mock_input):
        num = validate_user_input()

        expected = 'You did not enter a valid number, please try again\n' * 4

        self.assertEqual(expected, mock_stdout.getvalue())
        self.assertEqual(4, num)

    @mock.patch('builtins.input', return_value='6')
    @mock.patch('sys.stdout', new_callable=io.StringIO)
    def test_validate_user_input_eventual_success(self, mock_stdout, mock_input):
        num = validate_user_input()

        self.assertEqual(6, num)

    @mock.patch('sys.stdout', new_callable=io.StringIO)
    def test_print_tenth_item_success(self, mock_stdout):
        print_tenth_item(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k'])

        self.assertEqual('j\n', mock_stdout.getvalue())

    @mock.patch('sys.stdout', new_callable=io.StringIO)
    def test_print_tenth_item_failure(self, mock_stdout):
        print_tenth_item(['a', 'b', 'c', 'd'])

        self.assertEqual('N/A\n', mock_stdout.getvalue())
